import { Size3 } from "../Size3";
import { Point3 } from "../Point3";
import { ScaleMode } from "../Size2";
export declare type Anchor3 = "leftTopFront" | "centerTopFront" | "rightTopFront" | "leftCenterFront" | "frontCenter" | "rightCenterFront" | "leftBottomFront" | "centerBottomFront" | "rightBottomFront" | "leftTopCenter" | "topCenter" | "rightTopCenter" | "leftCenter" | "center" | "rightCenter" | "leftBottomCenter" | "bottomCenter" | "rightBottomCenter" | "leftTopBack" | "centerTopBack" | "rightTopBack" | "leftCenterBack" | "backCenter" | "rightCenterBack" | "leftBottomBack" | "centerBottomBack" | "rightBottomBack";
export declare class Box3 {
    static givenCenterSize(center: Point3, size: Size3): Box3;
    static givenOppositeCorners(pointA: Point3, pointB: Point3): Box3;
    static givenContainedPoints(points: Point3[]): Box3;
    static isEqual(a: Box3, b: Box3): boolean;
    private _center;
    private _size;
    private constructor();
    get center(): Point3;
    get size(): Size3;
    isPointInside(point: Point3): boolean;
    isEqual(other: Box3): boolean;
    toTop(): number;
    toLeft(): number;
    toRight(): number;
    toBottom(): number;
    toFront(): number;
    toBack(): number;
    toLeftTopFront(): Point3;
    toCenterTopFront(): Point3;
    toRightTopFront(): Point3;
    toLeftCenterFront(): Point3;
    toFrontCenter(): Point3;
    toRightCenterFront(): Point3;
    toLeftBottomFront(): Point3;
    toCenterBottomFront(): Point3;
    toRightBottomFront(): Point3;
    toLeftTopCenter(): Point3;
    toTopCenter(): Point3;
    toRightTopCenter(): Point3;
    toLeftCenter(): Point3;
    toRightCenter(): Point3;
    toLeftBottomCenter(): Point3;
    toBottomCenter(): Point3;
    toRightBottomCenter(): Point3;
    toLeftTopBack(): Point3;
    toCenterTopBack(): Point3;
    toRightTopBack(): Point3;
    toLeftCenterBack(): Point3;
    toBackCenter(): Point3;
    toRightCenterBack(): Point3;
    toLeftBottomBack(): Point3;
    toCenterBottomBack(): Point3;
    toRightBottomBack(): Point3;
    withBoundingBox(boundingBox: Box3, scaleMode: ScaleMode, anchor: Anchor3): Box3;
    withAddedSize(size: Size3, anchor: Anchor3): Box3;
    withAddedWidthHeightDepth(width: number, height: number, depth: number, anchor: Anchor3): Box3;
}
